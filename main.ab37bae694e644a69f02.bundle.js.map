{"version":3,"sources":["webpack:///./src/engine/GameLoop.ts","webpack:///./src/engine/layers/LayerStack.ts","webpack:///./src/engine/layers/ClearLayer.ts","webpack:///./src/engine/math/Side.ts","webpack:///./src/engine/math/shape/Point.ts","webpack:///./src/engine/math/shape/Circle.ts","webpack:///./src/engine/math/shape/Rectangle.ts","webpack:///./src/engine/Collider.ts","webpack:///./src/engine/layers/EntitiesLayer.ts","webpack:///./src/engine/layers/FpsLayer.ts","webpack:///./src/engine/layers/CollisionLayer.ts","webpack:///./src/engine/GameEngine.ts","webpack:///./src/bouncing-ball/Area.ts","webpack:///./src/bouncing-ball/Ball.ts","webpack:///./src/main.ts","webpack:///./src/bouncing-ball/BouncingBall.ts"],"names":["engine","_accumulatedTime","_lastTime","_animationFrameCallBack","time","_loop","start","this","_animationFramehandle","requestAnimationFrame","stop","cancelAnimationFrame","deltaTime","_fps","Math","round","update","renderer","_layers","addLayer","name","layer","removeLayer","Object","keys","forEach","graphics","beginPath","fillStyle","fillRect","canvas","width","height","closePath","values","Side","LEFT","TOP","RIGHT","BOTTOM","x","y","fromPosition","position","Point","distance","point","sqrt","squareDistance","d1","d2","draw","radius","arc","PI","stroke","rect","delegate","checkTop","s1","s2","checkBottom","checkLeft","checkRight","Error","top","center","bottom","left","right","SHAPES_COLLIDERS","Rectangle","CircleRectangleCollider","CircleCircleCollider","RectangleRectangleCollider","entities","check","i","length","e1","j","_checkCollision","e2","collisionShape","collider","_findCollider","side","_findCheckFct","bind","checkFct","collides","shapeCollider","find","ReverseCollider","entity","fpsSupplier","offset","font","fillText","strokeStyle","map","shape","game","LayerStack","_entities","document","createElement","body","appendChild","canvasSize","_graphics","getContext","ClearLayer","EntitiesLayer","CollisionLayer","FpsLayer","_gameLoop","fps","_collider","GameLoop","addEntity","push","removeEntity","slice","indexOf","other","console","log","_radius","_velocity","random","fill","_gameEngine","ball"],"mappings":"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","file":"main.ab37bae694e644a69f02.bundle.js","sourcesContent":["import { Game } from \"./Game\";\nimport { GameEngine } from \"./GameEngine\";\n\nconst UPDATE_INTERVAL = 1/60;\n\nexport class GameLoop {\n    private _animationFramehandle: number;\n    private _accumulatedTime = 0;\n    private _lastTime: number = 0;\n    private _fps: number;\n\n    private _animationFrameCallBack = (time: number) => this._loop(time);\n\n    constructor(private engine: GameEngine) {}\n\n    start() {\n        this._animationFramehandle = requestAnimationFrame(this._animationFrameCallBack);\n    }\n\n    stop() {\n        cancelAnimationFrame(this._animationFramehandle);\n    }\n\n    private _loop(time: number) {\n        const deltaTime = (time - this._lastTime) / 1000;\n        this._accumulatedTime += deltaTime;\n        this._fps = Math.round(1 /  deltaTime);\n\n        while (this._accumulatedTime > UPDATE_INTERVAL) {\n            this.engine.update(UPDATE_INTERVAL);\n            this._accumulatedTime -= UPDATE_INTERVAL;\n        }\n        this.engine.renderer();\n        \n        this._lastTime = time;\n        this._animationFramehandle = requestAnimationFrame(this._animationFrameCallBack);\n    }\n\n    get fps() {\n        return this._fps;\n    }\n}\n","import { Layer } from \"./Layer\";\n\ntype Layers = {\n    [name: string]: Layer\n}\n\nexport class LayerStack {\n    private _layers: Layers = {}\n\n    addLayer(name: string, layer: Layer) {\n        this._layers[name] = layer;\n    }\n\n    removeLayer(name: string) {\n        delete this._layers[name];\n    }\n\n    update(deltaTime: number) {\n        Object.keys(this._layers)\n            .forEach(name => this._layers[name].update(deltaTime));\n    }\n\n    renderer(graphics: CanvasRenderingContext2D) {\n        Object.keys(this._layers)\n            .forEach(name => this._layers[name].renderer(graphics));\n    }\n}\n","import { Layer } from \"./Layer\";\n\nexport class ClearLayer implements Layer {\n\n    update(deltaTime: number): void {\n    }\n\n    renderer(graphics: CanvasRenderingContext2D): void {\n        graphics.beginPath();\n        graphics.fillStyle = \"black\";\n        graphics.fillRect(\n            0, 0,\n            graphics.canvas.width, graphics.canvas.height);\n        graphics.closePath();\n    }\n\n}\n","export class Side {\n    static LEFT = new Side(\"LEFT\");\n    static TOP = new Side(\"TOP\");\n    static RIGHT = new Side(\"RIGHT\");\n    static BOTTOM = new Side(\"BOTTOM\");\n\n    constructor(\n        public readonly name: string) {}\n\n    static values(): Array<Side> {\n        return [ Side.LEFT, Side.TOP, Side.RIGHT, Side.BOTTOM ];\n    }\n}\n","import { Shape } from \"./Shape\";\nimport { Position } from \"../Position\";\n\nexport class Point implements Shape {\n    static fromPosition(position: Position) {\n        return new Point(position.x, position.y);\n    }\n    \n    constructor(\n        public readonly x: number,\n        public readonly y: number\n    ) {}\n\n    distance(point: Point): number {\n        return Math.sqrt(this.squareDistance(point));\n    }\n\n    squareDistance(point: Point): number {\n        const d1 = point.x - this.x;\n        const d2 = point.y - this.y;\n        return (d1 * d1) + (d2 * d2);\n    }\n\n    draw(graphics: CanvasRenderingContext2D) {\n        graphics.fillRect(this.x, this.y, 1, 1);\n    }\n}\n","import { Position } from \"../Position\";\nimport { Shape } from \"./Shape\";\nimport { Point } from \"./Point\";\n\nexport class Circle implements Shape {\n\n    constructor(\n        public readonly position: Position,\n        public readonly radius: number) {\n    }\n\n    get center() {\n        return Point.fromPosition(this.position);\n    }\n\n    draw(graphics: CanvasRenderingContext2D) {\n        graphics.beginPath();\n        graphics.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);\n        graphics.stroke();\n        graphics.closePath();\n    }\n}\n","import { Shape } from \"./Shape\";\n\nexport class Rectangle implements Shape {\n    constructor(\n        public readonly x: number,\n        public readonly y: number,\n        public readonly width: number,\n        public readonly height: number\n    ) {}\n\n    draw(graphics: CanvasRenderingContext2D): void {\n        graphics.beginPath();\n        graphics.rect(this.x, this.y, this.width, this.height);\n        graphics.stroke();\n        graphics.closePath();\n    }\n}\n","import { Entity } from \"./Entity\";\nimport { Side } from \"./math/Side\";\nimport { Circle } from \"./math/shape/Circle\";\nimport { Rectangle } from \"./math/shape/Rectangle\";\nimport { Shape } from \"./math/shape/Shape\";\n\ntype colliderFct<S1 extends Shape, S2 extends Shape> = (s1: S1, s2: S2) => boolean;\n\ninterface ShapeCollider<S1 extends Shape, S2 extends Shape> {\n    checkTop(s1: S1, s2: S2): boolean;\n    checkBottom(s1: S1, s2: S2): boolean;\n    checkLeft(s1: S1, s2: S2): boolean;\n    checkRight(s1: S1, s2: S2): boolean;\n}\n\nclass ReverseCollider<S2 extends Shape, S1 extends Shape> implements ShapeCollider<S1, S2> {\n    constructor(private delegate: ShapeCollider<S2, S1>) {}\n    \n    checkTop(s1: S1, s2: S2): boolean {\n        return this.delegate.checkTop(s2, s1);\n    }\n\n    checkBottom(s1: S1, s2: S2): boolean {\n        return this.delegate.checkBottom(s2, s1);\n    }\n\n    checkLeft(s1: S1, s2: S2): boolean {\n        return this.delegate.checkLeft(s2, s1);\n    }\n\n    checkRight(s1: S1, s2: S2): boolean {\n        return this.delegate.checkRight(s2, s1);\n    }\n}\n\nclass CircleCircleCollider implements ShapeCollider<Circle, Circle> {\n    checkTop(s1: Circle, s2: Circle): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    checkBottom(s1: Circle, s2: Circle): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    checkLeft(s1: Circle, s2: Circle): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    checkRight(s1: Circle, s2: Circle): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nclass RectangleRectangleCollider implements ShapeCollider<Rectangle, Rectangle> {\n    checkTop(s1: Rectangle, s2: Rectangle): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    checkBottom(s1: Rectangle, s2: Rectangle): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    checkLeft(s1: Rectangle, s2: Rectangle): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    checkRight(s1: Rectangle, s2: Rectangle): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\nclass CircleRectangleCollider implements ShapeCollider<Circle, Rectangle> {\n    checkTop(s1: Circle, s2: Rectangle): boolean {\n        const top = s2.y;\n        return s1.center.y - s1.radius <= top\n            && top <= s1.center.y + s1.radius\n            && s2.x <= s1.center.x + s1.radius\n            && s2.x + s2.width >= s1.center.x - s1.radius;\n    }\n\n    checkBottom(s1: Circle, s2: Rectangle): boolean {\n        const bottom = s2.y + s2.height;\n        return s1.center.y - s1.radius <= bottom\n            && bottom <= s1.center.y + s1.radius\n            && s2.x <= s1.center.x + s1.radius\n            && s2.x + s2.width >= s1.center.x - s1.radius;\n    }\n\n    checkLeft(s1: Circle, s2: Rectangle): boolean {\n        const left = s2.x;\n        return s1.center.x - s1.radius <= left\n            && left <= s1.center.x + s1.radius\n            && s2.y <= s1.center.y + s1.radius\n            && s2.y + s2.height >= s1.center.y - s1.radius;\n    }\n\n    checkRight(s1: Circle, s2: Rectangle): boolean {\n        const right = s2.x + s2.width;\n        return s1.center.x - s1.radius <= right\n            && right <= s1.center.x + s1.radius\n            && s2.y <= s1.center.y + s1.radius\n            && s2.y + s2.height >= s1.center.y - s1.radius;\n    }\n}\n\ntype ColliderDef<S1 extends Shape, S2 extends Shape> = {\n    s1: S1,\n    s2: S2,\n    collider: ShapeCollider<S1, S2>\n}\nconst SHAPES_COLLIDERS: Array<ColliderDef<any, any>> = [\n    {\n        \"s1\": Circle,\n        \"s2\": Rectangle,\n        \"collider\": new CircleRectangleCollider()\n    }, {\n        \"s1\": Circle,\n        \"s2\": Circle,\n        \"collider\": new CircleCircleCollider()\n    }, {\n        \"s1\": Rectangle,\n        \"s2\": Rectangle,\n        \"collider\": new RectangleRectangleCollider()\n    }\n]\n\nexport class Collider {\n\n    constructor(\n        private entities: Array<Entity>) {\n    }\n\n    check() {\n        for (let i = 0; i < this.entities.length; i++) {\n            const e1 = this.entities[i];\n            for (let j = 0; j < this.entities.length; j++) {\n                if (i != j) {\n                    this._checkCollision(e1, this.entities[j]);\n                }\n            }\n        }\n    }\n\n    _checkCollision(e1: Entity, e2: Entity) {\n        const s1 = e1.collisionShape;\n        const s2 = e2.collisionShape;\n        const collider = this._findCollider(s1, s2);\n        Side.values().forEach(side => {\n            const checkFct = this._findCheckFct(collider, side).bind(collider);\n            if (checkFct(s1, s2)) {\n                e1.collides(e2, side);\n            }\n        });\n    }\n\n    _findCollider<S1 extends Shape, S2 extends Shape>(s1: S1, s2: S2): ShapeCollider<S1, S2> {\n        const shapeCollider = SHAPES_COLLIDERS\n            .find(collider => \n                (s1 instanceof collider.s1 && s2 instanceof collider.s2) || \n                (s1 instanceof collider.s2 && s2 instanceof collider.s1));\n        if (s1 instanceof shapeCollider.s1) {\n            return shapeCollider.collider;\n        }\n        return new ReverseCollider(shapeCollider.collider);\n    }\n\n    _findCheckFct<S1 extends Shape, S2 extends Shape>(collider: ShapeCollider<S1, S2>, side: Side): colliderFct<S1, S2> {\n        switch (side) {\n            case Side.TOP:\n                return collider.checkTop;\n            case Side.BOTTOM:\n                return collider.checkBottom;\n            case Side.LEFT:\n                return collider.checkLeft;\n            case Side.RIGHT:\n                return collider.checkRight;\n        }\n    }\n}\n","import { Entity } from \"../Entity\";\nimport { Layer } from \"./Layer\";\n\nexport class EntitiesLayer implements Layer {\n    constructor(private entities: Array<Entity>) {}\n    \n    update(deltaTime: number): void {\n        this.entities.forEach(entity => entity.update(deltaTime));\n    }\n    \n    renderer(graphics: CanvasRenderingContext2D): void {\n        this.entities.forEach(entity => entity.renderer(graphics));\n    }\n}\n","import { Layer } from \"./Layer\";\nimport { GameEngine } from \"../GameEngine\";\n\ntype FpsSupplier = () => number;\n\nexport class FpsLayer implements Layer {\n    constructor(private fpsSupplier: FpsSupplier, private offset = {\n        x: -50,\n        y: 16\n    }) {}\n\n    update(deltaTime: number): void {\n    }\n\n    renderer(graphics: CanvasRenderingContext2D): void {\n        graphics.fillStyle = \"white\";\n        graphics.font = '16px';\n        graphics.fillText(\"FPS: \" + this.fpsSupplier(), graphics.canvas.width + this.offset.x, this.offset.y);\n    }\n\n}\n","import { Layer } from \"./Layer\";\nimport { Entity } from \"../Entity\";\n\nexport class CollisionLayer implements Layer {\n\n    constructor(private entities: Array<Entity>) {}\n\n    update(deltaTime: number): void {\n    }\n\n    renderer(graphics: CanvasRenderingContext2D): void {\n        graphics.strokeStyle = \"red\";\n        graphics.fillStyle = \"red\";\n        this.entities\n            .map(entity => entity.collisionShape)\n            .forEach(shape => shape.draw(graphics));\n    }\n\n\n}\n","import { Game } from \"./Game\";\nimport { GameLoop } from \"./GameLoop\";\nimport { LayerStack } from \"./layers/LayerStack\";\nimport { Layer } from \"./layers/Layer\";\nimport { ClearLayer } from \"./layers/ClearLayer\";\nimport { Entity } from \"./Entity\";\nimport { Collider as Collider } from \"./Collider\";\nimport { EntitiesLayer } from \"./layers/EntitiesLayer\";\nimport { FpsLayer } from \"./layers/FpsLayer\";\nimport { CollisionLayer } from \"./layers/CollisionLayer\";\n\nexport class GameEngine {\n    private _gameLoop: GameLoop;\n    private _layers = new LayerStack();\n    private _graphics: CanvasRenderingContext2D;\n    private _entities: Array<Entity> = [];\n    private _collider: Collider;\n\n    constructor(game: Game) {\n        const canvas = document.createElement(\"canvas\");\n        document.body.appendChild(canvas);\n        canvas.width = game.canvasSize.width;\n        canvas.height = game.canvasSize.height;\n        this._graphics = canvas.getContext(\"2d\");\n        this._layers.addLayer(\"clear\", new ClearLayer());\n        this._layers.addLayer(\"entities\", new EntitiesLayer(this._entities));\n        this._layers.addLayer(\"collision\", new CollisionLayer(this._entities));\n        this._layers.addLayer(\"fps\", new FpsLayer(() => this._gameLoop.fps));\n        this._collider = new Collider(this._entities);\n        this._gameLoop = new GameLoop(this);\n    }\n\n    start() {\n        this._gameLoop.start();\n    }\n\n    stop() {\n        this._gameLoop.stop();\n    }\n\n    addLayer(name: string, layer: Layer) {\n        this._layers.addLayer(name, layer);\n    }\n\n    removeLayer(name: string) {\n        this._layers.removeLayer(name);\n    }\n\n    addEntity(entity: Entity) {\n        this._entities.push(entity);\n    }\n\n    removeEntity(entity: Entity) {\n        this._entities.slice(this._entities.indexOf(entity));\n    }\n    \n    update(deltaTime: number) {\n        this._collider.check();\n        this._layers.update(deltaTime);\n    }\n\n    renderer() {\n        this._layers.renderer(this._graphics);\n    }\n}\n","import { Entity } from \"../engine/Entity\";\nimport { Rectangle } from \"../engine/math/shape/Rectangle\";\nimport { Side } from \"../engine/math/Side\";\n\nexport class Area implements Entity {\n    public readonly collisionShape: Rectangle;\n\n    constructor(\n        public readonly x: number,\n        public readonly y: number,\n        public readonly width: number,\n        public readonly height: number\n    ) {\n        this.collisionShape = new Rectangle(x, y, width, height);\n    }\n\n    renderer(graphics: CanvasRenderingContext2D): void {\n    }\n\n    update(deltaTime: number): void {\n    }\n\n    collides(other: Entity, side: Side): void {\n        console.log(this, \"collides with \", other, side);\n    }\n    \n}\n","import { Position } from '../engine/math/Position';\nimport { Entity } from '../engine/Entity';\nimport { Circle } from '../engine/math/shape/Circle';\nimport { Side } from '../engine/math/Side';\nimport { Area } from './Area';\n\nexport class Ball implements Entity {\n    private _radius = 20;\n    position: Position;\n    private _velocity = {\n        x: (Math.random() > 0.5 ? 1 : -1) * 100,\n        y: (Math.random() > 0.5 ? 1 : -1) * 100,\n    }\n\n    constructor(x: number, y: number) {\n        this.position = {x, y};\n    }\n\n    update(deltaTime: number): void {\n        this.position.x += this._velocity.x * deltaTime;\n        this.position.y += this._velocity.y * deltaTime;\n    }\n\n    renderer(graphics: CanvasRenderingContext2D): void {\n        graphics.fillStyle = \"white\";\n        this.collisionShape.draw(graphics);\n        graphics.fill();\n    }\n\n    get collisionShape() {\n        return new Circle(this.position, this._radius);\n    }\n    \n    collides(other: Entity, side: Side): void {\n        console.log(this, \"collides with \", other, side);\n        if (other instanceof Area) {\n            if (side == Side.RIGHT || side == Side.LEFT) {\n                this._velocity.x = this._velocity.x * -1;\n            } else if (side == Side.TOP || side == Side.BOTTOM) {\n                this._velocity.y = this._velocity.y * -1;\n            }\n        }\n    }\n}\n","// import { Pad } from \"./Pad\";\n// import { Ball } from \"./Ball\";\n// import { GameLoop } from \"./engine/GameLoop\";\n\nimport { BouncingBall } from \"./bouncing-ball/BouncingBall\";\n\n// const canvas = document.createElement(\"canvas\");\n// document.body.appendChild(canvas);\n// canvas.width = 800;\n// canvas.height = 600;\n\n// const graphics = canvas.getContext(\"2d\");\n\n// const MARGIN = 50;\n// const leftPad = new Pad(MARGIN, canvas.height / 2);\n// const rightPad = new Pad(canvas.width - MARGIN, canvas.height / 2);\n// const ball = new Ball(canvas.width / 2, canvas.height / 2);\n\n// const entities = [ leftPad, rightPad, ball ];\n\n// const draw = (deltaTime: number) => {\n//     graphics.fillStyle = \"black\";\n//     graphics.fillRect(0, 0, canvas.width, canvas.height);\n//     entities.forEach(e => e.update(deltaTime))\n//     entities.forEach(e => e.draw(graphics));  \n// }\n// const gameLoop = new GameLoop(draw);\n// gameLoop.start();\n\nconst game = new BouncingBall();\ngame.start();\n","import { Game } from \"../engine/Game\";\nimport { GameEngine } from \"../engine/GameEngine\";\nimport { Size } from \"../engine/math/Size\";\nimport { Ball } from \"./Ball\";\nimport { FpsLayer } from \"../engine/layers/FpsLayer\";\nimport { Area } from \"./Area\";\n\nexport class BouncingBall implements Game {\n    private _gameEngine: GameEngine;\n    \n    constructor() {\n        this._gameEngine = new GameEngine(this);\n        const ball = new Ball(this.canvasSize.width / 2, this.canvasSize.height / 2);\n        this._gameEngine.addEntity(new Area(10, 10, this.canvasSize.width - 20, this.canvasSize.height - 20));\n        this._gameEngine.addEntity(ball);\n    }\n\n    start() {\n        this._gameEngine.start();\n    }\n\n    stop() {\n        this._gameEngine.stop();\n    }\n\n    get canvasSize(): Size {\n        return {\n            width: 800,\n            height: 600\n        };\n    }\n}\n"],"sourceRoot":""}